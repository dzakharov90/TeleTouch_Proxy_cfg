######################################################################
## Core Logging Parameters
######################################################################
log_level=3
sip_warning=0
log_stderror=no
log_facility=LOG_LOCAL0

######################################################################
## Core Fork Parameters
######################################################################
tcp_children=8
children=4
server_signature = yes
server_header = "Server: TeleTouchProxy_v1"
user_agent_header = "User-Agent: TeleTouchProxy_v1"

######################################################################
## DNS
######################################################################
dns=yes
dns_retr_time=1
dns_retr_no=3
# dns_servers_no=2
dns_try_ipv6=no
disable_dns_blacklist=no
disable_dns_failover=no
dns_use_search_list=no
rev_dns=yes
dns_try_naptr = yes

######################################################################
## Aliases
######################################################################
alias = udp:192.168.0.6:5060
alias = tcp:192.168.0.6:5060
alias = udp:192.168.0.6:5080
alias = tcp:192.168.0.6:5080
alias = udp:192.168.0.6:5081
alias = tcp:192.168.0.6:5081
alias = udp:192.168.0.6:5082
alias = tcp:192.168.0.6:5082
auto_aliases = no
#alias=localhost
#alias=localhost.localdomain

######################################################################
## Connectivity
######################################################################
listen=udp:ens192:5060   # CUSTOMIZE ME
listen=tcp:ens192:5060   # CUSTOMIZE ME
listen=udp:ens192:5080   # CUSTOMIZE ME
listen=tcp:ens192:5080   # CUSTOMIZE ME
listen=udp:ens192:5081   # CUSTOMIZE ME
listen=tcp:ens192:5081   # CUSTOMIZE ME
listen=udp:ens192:5082   # CUSTOMIZE ME
listen=tcp:ens192:5082   # CUSTOMIZE ME

#listen=udp:ens192:5060 as 194.186.177.74:5060   # CUSTOMIZE ME
#listen=tcp:ens192:5060 as 194.186.177.74:5060   # CUSTOMIZE ME
#listen=udp:ens192:5080 as 194.186.177.74:5080   # CUSTOMIZE ME
#listen=tcp:ens192:5080 as 194.186.177.74:5080   # CUSTOMIZE ME
#listen=udp:ens192:5081 as 194.186.177.74:5081   # CUSTOMIZE ME
#listen=tcp:ens192:5081 as 194.186.177.74:5081   # CUSTOMIZE ME
#listen=udp:ens192:5082 as 194.186.177.74:5082   # CUSTOMIZE ME
#listen=tcp:ens192:5082 as 194.186.177.74:5082   # CUSTOMIZE ME

listen=bin:ens192:5566
listen=udp:lo:5060   # CUSTOMIZE ME
listen=tcp:lo:5060   # CUSTOMIZE ME
listen=udp:lo:5080   # CUSTOMIZE ME
listen=tcp:lo:5080   # CUSTOMIZE ME
listen=bin:lo:5566
#HEPv3 listener
listen=hep_tcp:ens192:6061                # change the listening IP
#HEPv1, v2, v3 listener
listen=hep_udp:ens192:6061                # change the listening IP
#advertised_address="194.186.177.74"

####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### HTTPD module
loadmodule "httpd.so"
modparam("httpd", "port", 8888)

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

loadmodule "uri.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 60)
modparam("tm", "restart_fr_on_each_reply", 1)
modparam("tm", "onreply_avp_mode", 1)
modparam("tm", "tm_replication_cluster", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 1)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### POSTGRESQL module
loadmodule "db_postgres.so"
modparam("db_postgres", "max_db_queries", 7000)
modparam("db_postgres", "exec_query_threshold", 60000)

#### CouchDB module
#loadmodule "cachedb_couchbase.so"
#modparam("cachedb_couchbase", "cachedb_url","couchbase:cluster1://10.0.1.28:5984/yulsipdb")

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure to enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
modparam("acc", "db_url","postgres://opensips:OpenSIPS2020TeleTouch@localhost/opensips") # CUSTOMIZE ME

#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 2)
#modparam("dialog", "dialog_replication_cluster", 1)
#modparam("dialog", "profile_replication_cluster", 1)
modparam("dialog", "db_url", "postgres://opensips:OpenSIPS2020TeleTouch@localhost/opensips") # CUSTOMIZE ME
modparam("dialog", "dialog_replication_cluster", 1)
modparam("dialog", "profile_replication_cluster", 1)

####  NAT modules
loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", "SIP_PING_FLAG")
modparam("nathelper", "sipping_from", "sip:registrar@fs.zvonil.ru") #CUSTOMIZE ME
modparam("nathelper", "received_avp", "$avp(received_nh)")

####  PERMISSIONS module
loadmodule "permissions.so"
modparam("permissions", "db_url", "postgres://opensips:OpenSIPS2020TeleTouch@localhost/opensips") # CUSTOMIZE ME

#### Path module
loadmodule "path.so"
modparam("path", "use_received", 1)
modparam("path", "enable_double_path", 0)

#### Topology Hiding module
loadmodule "topology_hiding.so"
modparam("topology_hiding", "th_callid_passwd", "XDpH8cwZ2ysbMfWf")
modparam("topology_hiding", "force_dialog", 1)

#### Avpops module
loadmodule "avpops.so"
modparam("avpops","db_url","postgres://opensips:OpenSIPS2020TeleTouch@localhost/opensips")
modparam("avpops","db_url","1 postgres://fsuser:6fFkv1LUiSamK0v9RmW8J5fZDh0aByi3@localhost/fsdir")
#modparam("avpops","db_url","1 postgres://opensips:H3ll0Opens!ps2020!!@localhost/opensips")

#### EVENT_ROUTING module
loadmodule "event_routing.so"

#### MID_REGISTRAR module
loadmodule "mid_registrar.so"
modparam("mid_registrar", "mode", 2)
modparam("mid_registrar", "contact_id_insertion", "ct-username")
modparam("mid_registrar", "contact_id_param", "ctid")
modparam("mid_registrar", "retry_after", 30)
modparam("mid_registrar", "extra_contact_params_avp", "$avp(extra_ct_params)")
modparam("mid_registrar", "min_expires", 30)
modparam("mid_registrar", "default_expires", 360)
modparam("mid_registrar", "max_expires", 7200)
modparam("mid_registrar", "tcp_persistent_flag", "TCP_PERSIST_REGISTRATIONS")
modparam("mid_registrar", "max_contacts", 2)

loadmodule "proto_bin.so"
loadmodule "clusterer.so"
modparam("clusterer", "node_timeout", 10)
#modparam("clusterer", "sharing_tag", "vip1/1=active")
modparam("clusterer", "current_id", 1)
modparam("clusterer", "db_mode", 1)
modparam("clusterer", "db_url", "postgres://opensips:OpenSIPS2020TeleTouch@localhost/opensips")

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "SIP_PING_FLAG")
modparam("usrloc", "db_mode", 2)
#modparam("usrloc", "working_mode_preset", "full-sharing-cluster")
#modparam("usrloc", "location_cluster", 1)
modparam("usrloc", "cluster_mode", "sql-only")
modparam("usrloc", "db_url", "postgres://opensips:OpenSIPS2020TeleTouch@localhost/opensips") # CUSTOMIZE ME
#modparam("usrloc", "cachedb_url", "couchbase:cluster1://10.0.1.28:5984/yulsipdb")

####  DYNAMMIC ROUTING module
#loadmodule "drouting.so"
#modparam("drouting", "cluster_id", 1)
#modparam("drouting", "db_url", "postgres://opensips:OpenSIPS2020TeleTouch@localhost/opensips") # CUSTOMIZE ME

#### DISPATCHER module
loadmodule "dispatcher.so"
modparam("dispatcher", "db_url","postgres://opensips:OpenSIPS2020TeleTouch@localhost/opensips") # CUSTOMIZE ME
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_ping_interval", 10)
modparam("dispatcher", "options_reply_codes", "401, 407")

#### User Agent Client module
loadmodule "uac.so"
modparam("uac", "force_dialog", yes)
modparam("uac","restore_mode","auto")
loadmodule "uac_auth.so"
modparam("uac_auth","credential","username:domain:password")
modparam("uac_auth","auth_username_avp", "$avp(user)")
modparam("uac_auth","auth_password_avp", "$avp(pass)")
modparam("uac_auth","auth_realm_avp", "$avp(realm)")
loadmodule "uac_registrant.so"
modparam("uac_registrant", "hash_size", 2)
modparam("uac_registrant", "timer_interval", 10)
modparam("uac_registrant", "db_url", "postgres://opensips:OpenSIPS2020TeleTouch@localhost/opensips") # CUSTOMIZE ME

####  MI_HTTP module
loadmodule "mi_http.so"

#### RTPEngine module
#loadmodule "rtpengine.so"
#modparam("rtpengine", "rtpengine_disable_tout", 20)
#modparam("rtpengine", "rtpengine_tout", 2)
#modparam("rtpengine", "rtpengine_retr", 2)
#modparam("rtpengine", "setid_avp", "$avp(setid)")
#modparam("rtpengine", "db_url", "postgres://opensips:OpenSIPS2020TeleTouch@localhost/opensips")

loadmodule "proto_udp.so"
loadmodule "proto_tcp.so" 
loadmodule "proto_hep.so"
modparam("proto_hep", "hep_async", 1)
modparam("proto_hep", "homer5_on", 1)
modparam("proto_hep", "hep_capture_id", 10)
#modparam("proto_hep", "hep_id", "[hid]94.229.237.5:9060;transport=udp;version=3")
#modparam("proto_hep", "hep_id", "[hid]34.107.60.63:9060;transport=udp;version=3")
#loadmodule "proto_tls.so"

#loadmodule "tls_mgm.so"
#modparam("tls_mgm","server_domain", "default")
#modparam("tls_mgm","match_ip_address", "[default]*")
#modparam("tls_mgm","verify_cert", "[default]1")
#modparam("tls_mgm","require_cert", "[default]0")
#modparam("tls_mgm","tls_method", "[default]TLSv1")
#modparam("tls_mgm","certificate", "[default]/etc/opensips/tls/user/user-cert.pem")
#modparam("tls_mgm","private_key", "[default]/etc/opensips/tls/user/user-privkey.pem")
#modparam("tls_mgm","ca_list", "[default]/etc/opensips/tls/user/user-calist.pem")
 
#### SIP Trace Module
#loadmodule "siptrace.so"
#modparam("siptrace", "trace_id","[tid]uri=postgres://opensips:OpenSIPS2020TeleTouch@localhost/opensips;table=sip_trace;")
#modparam("siptrace", "trace_local_ip", "192.168.0.6")
#modparam("siptrace", "trace_on", 1)
#modparam("siptrace", "trace_id", "[tid]uri=hep:hid")

####### Routing Logic ########


# main request routing logic

route{


	route(ANTIFLOOD);

	# initial NAT handling; detect if the request comes from behind a NAT
	# and apply contact fixing

	route(NATCHECK);

	#sip_trace("tid", "D","sip|xlog|log");

	if (has_totag()) {
		#trace("tid", "d","sip|xlog|log");
		if (topology_hiding_match()) {
			if (is_method("INVITE")){
				xlog("L_INFO","[REINVITE]      [$fU->$tU] Re-INIVTE received from $si:$sp ($(ci{s.md5}))");
			}
			if (is_method("BYE")){
				xlog("L_WARN","[DIALOG]        [$fU->$tU] Dialog status on BYE is $DLG_status for $DLG_did, routing ($(ci{s.md5}))");
			} else {
				xlog("L_WARN","[MATCH]         [$fU->$tU] Routing packet $si:$sp, RM: $rm, RU: $ru, DU: $du, FT: $ft, TT: $tt ($(ci{s.md5}))");
			}
        	xlog("Succesfully matched this request to a topology hiding dialog. \n");
        	xlog("Calller side callid is $ci \n");
			if ( is_method("ACK")) {
				if (ds_is_in_list('$si', '$sp')) {
					set_advertised_address("194.186.177.74");
				}
			}
			if ( is_method("BYE")) {
				#rtpengine_delete();
				if (ds_is_in_list('$si', '$sp')) {
					set_advertised_address("194.186.177.74");
				}
			}
        	route(relay);
        	exit;
		} else {
		# handle hop-by-hop ACK (no routing required)
			if ( is_method("ACK") && t_check_trans() ) {
				if (ds_is_in_list('$si', '$sp')) {
					set_advertised_address("194.186.177.74");
				}
				t_relay();
				exit;
			}
		}
		
		if (is_method("BYE")) {
			#rtpengine_delete();
			if (ds_is_in_list('$si', '$sp')) {
				set_advertised_address("194.186.177.74");
			}
			# do accounting even if the transaction fails
			do_accounting("db","failed");
			
		}

		#if (!is_method("ACK"))
		#	async (pn_process_purr("location"), resume_route);

		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(relay);
		exit;
	}

	#### INITIAL REQUESTS

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			#rtpengine_delete();
			t_relay();
		}
		exit;
	}

	# UPDATE processing
	if (is_method("UPDATE")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	if ( !is_method('REGISTER') && $rU==NULL) {
		# request with no Username in RURI
		send_reply('484',"Address Incomplete");
		exit;
	}

	t_check_trans();

	do_accounting("db");
	
	route(dispatcher);

#	route(relay);
}

route [resume_route] {
	$var(rc) = $rc;
	xlog("pn_process_purr() finished with $var(rc)\n");
}

route[ANTIFLOOD] {

############ 21.03.2019 Security Update ############

	if ($ua == "friendly-scanner" ||
		$ua == "sundayddr" ||
    	$ua == "pplsip" ||
    	$ua =~ "NiceGuy" ||
    	$ua =~ "sipcli" ||
		$ua =~ "VaxSIPUserAgent" ||
		$ua =~ "VaxSIPUserAgent/v" ||
		$ua =~ "sipcli/v" ||
		$ua =~ "sipvicious" ||
		$ua =~ "iWar" ||
		$ua =~ "sip-scan" ||
		$ua =~ "hinet.net" ||
		$ua =~ "fdgddfg546df4g8d5f" ||
		$ua =~ "Vicidial" ||
		$ua =~ "srdfchgvm" ||
		$ua =~ "PCrNYocI" ||
		$ua =~ "assddfgghh" ||
		$ua =~ "Smap" ||
		$ua =~ "SIVuS" ||
		$ua =~ "Gulp" ||
		$ua =~ "sipv" ||
		$ua =~ "sadsadsd" ||
		$ua =~ "zxcvfdf11" ||
		$ua =~ "VaxIPUserAgent" ||
		$ua =~ "SipArmyKnife" ||
		$ua =~ "SIPScan" ||
		$ua =~ "Sipsak" ||
		$ua =~ "Sundayddr Worm" ||
		$ua =~ "fgfdhgfxjfhyjhkj" ||
		$ua =~ "gaf" ||
		$ua =~ "voxalot" ||
		$ua =~ "MizuPhone" ||
		$ua =~ "Ozeki" ||
		$ua =~ "tramb2017" ||
		#$ua =~ "voip" ||
		$ua =~ "hello" ||
		$ua =~ "Independant" ||
		$ua =~ "Skipper") {
    		xlog("L_WARN", "$ci|end|dropping message with user-agent $ua from $si:$sp\n");
			drop();
    		exit;
	}

	if (is_method("OPTIONS") && !ds_is_in_list("$si","$sp")) {
		send_reply("200", "OK");
		exit;
	}

	if(is_method("REGISTER|INVITE") && $Rp == '5060') {
	    if ($td =~ "([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})") {
			#if (ds_is_in_list("$si", "", "1")){
			if (ds_is_in_list("$si","$sp")) {
				return();
			}
			else
	    xlog("L_WARN", "$ci|end|dropping request with IP domain in To header\n");
    	drop();
	    exit;
		}
	}

    ## CVE-2018-14767
    if($(hdr(To)[1]) != NULL) {
        xlog("L_WARN", "$ci|end|second To header not null - dropping message");
        drop;
    }

    if ($tU == NULL) {
        xlog("L_INFO", "$ci|stop|ignoring subscribe with empty TO username from a $ua\n");
        send_reply("400", "Missing TO username");
        drop;
    }

    if ($fU == NULL) {
        xlog("L_INFO", "$ci|stop|ignoring subscribe with empty FROM username from a $ua\n");
        send_reply("400", "Missing FROM username");
        drop;
    }

############ 21.03.2019 Security Update ############

	if (!mf_process_maxfwd_header('10')) {
		xlog("L_WARN", "$ci|end|to many hops");
		send_reply('483',"Too Many Hops");
		exit;
	}

    if ($ml >=  4096 ) {
		xlog("L_WARN", "$ci|end|Big message received from $Au $si:$sp\n");
        sl_send_reply('513', "Message too big");
        drop();
		exit; 
    }

#	if (!pike_check_req()) { 
#		xlog("L_WARN", "$ci|end|request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
#		drop();
#		exit; 
#	};


}

route[NATCHECK] {
	force_rport();
	if (check_route_param("nat=yes")) 
		setflag(NAT);

    # if the request has a body see if it needs NAT corrections as well,
    # this check looks at:
    # 8. SDP is searched for occurrence of RFC1918 addresses

    if (has_body("application/sdp") && nat_uac_test('8')) {
		xlog("L_INFO", "$ci|log| 8 SDP contains a RFC1918 address");
    	# alters the SDP information in order to facilitate NAT traversal.
        # 2. rewrite media IP address (c=) with source IP
        # 8. rewrite IP from origin description (o=) with source IP
        fix_nated_sdp('10');
		setflag(NAT);
		xlog("L_INFO","$ci|log| Initial NAT check found SDP contains RFC1918 address, fixed");
	}
	
	if (nat_uac_test('7')) {
    	xlog("L_INFO", "$ci|log| 1 Contact header field is searched for occurrence of RFC1918 / RFC6598 addresses.");
		fix_nated_contact();
		setflag(NAT);
	}

	setbflag(SIP_PING_FLAG);
}

route [dispatcher] {
	if (is_method("INVITE")) {
        # Create new transaction to handle retransmits
        #t_newtran();

        create_dialog("B");
    }

	xlog('L_INFO','\n\n\n\n RP is $rp \n\n\n\n');
	xlog('L_INFO','\n\n\n\n OP is $op \n\n\n\n');

	if( !is_method("REGISTER") && ds_is_in_list('$si', '$sp')) { 
		if ( $Rp == '5080' ) {
			if (is_present_hf("X-Carrier")) {
				$avp(carriername) = $(hdr(X-Carrier));
				avp_db_query("select address from registrant where gw_name='$avp(carriername)'", "$avp(address)");
				avp_db_query("select port from registrant where gw_name='$avp(carriername)'", "$avp(port)");
				avp_db_query("SELECT username FROM registrant WHERE gw_name='$avp(carriername)'", "$avp(user)");
				avp_db_query("SELECT password FROM registrant WHERE gw_name='$avp(carriername)'", "$avp(pass)");
				xlog("L_NOTICE","[$ci] (X-Carrier HF IS $avp(carriername)");
				$du = 'sip:' + $avp(address) + ':' + $avp(port);
				$ru = 'sip:' + $tU + '@' + $avp(address) + ':' + $avp(port);
				force_send_socket(udp:192.168.0.6:5080);
				uac_replace_from("", "sip:$fU@$dd:5080");
				uac_replace_to("", "sip:$tU@$dd:$dp");
				if (is_present_hf("Diversion")) {
					$var(hdr) = $hdr(Diversion);
					$var(raw_divuser) = $var(hdr);
			    	$var(reg_start) = "/(.*?)<sip://g";
			        $var(reg_end) = "/@(.*)//g";
					$var(raw_divuser) = $(var(raw_divuser){re.subst,$var(reg_start)});
        			$var(raw_divuser) = $(var(raw_divuser){re.subst,$var(reg_end)});
					$avp(divuser) = $var(raw_divuser) ;
					remove_hf("Diversion");
					append_hf("Diversion: <sip:$avp(divuser)@194.186.177.74:5080>;reason=$dir;counter=1\r\n");
				}
				if (is_present_hf("P-Asserted-Identity")) {
					remove_hf("P-Asserted-Identity");
					append_hf("P-Asserted-Identity: <sip:$fU@194.186.177.74:5080>\r\n");
				}
				if (is_present_hf("Remote-Party-ID")) {
					remove_hf("Remote-Party-ID");
					append_hf("Remote-Party-ID: <sip:$fU@194.186.177.74:5080>\r\n");
				}
				if (is_present_hf("User-Agent")) {
					remove_hf("User-Agent");
					append_hf("User-Agent: TeleTouchProxy_v1\r\n");
				}
				if (is_present_hf("Server")) {
					remove_hf("Server");
					append_hf("Server: TeleTouchProxy_v1\r\n");
				}
				remove_hf("X-Carrier");
				route(relaycarrier);
			} else {
				xlog('L_INFO','\n\n\n\n X-Carrier header not found \n\n\n\n');
				t_reply('500','Internal server error');
				exit;
			}
		} else if ($Rp == '5060' ) {
			if (!mid_registrar_lookup("location")) {
				xlog('L_INFO','\n\n\n\n No stored AOR in USRLOC \n\n\n\n');
				t_reply('480','Temporarily unaviable');
				exit;
			}
			else
			if (is_present_hf("Diversion")) {
				$var(hdr) = $hdr(Diversion);
				$var(raw_divuser) = $var(hdr);
		    	$var(reg_start) = "/(.*?)<sip://g";
		        $var(reg_end) = "/@(.*)//g";
				$var(raw_divuser) = $(var(raw_divuser){re.subst,$var(reg_start)});
        		$var(raw_divuser) = $(var(raw_divuser){re.subst,$var(reg_end)});
				$avp(divuser) = $var(raw_divuser) ;
				remove_hf("Diversion");
				append_hf("Diversion: <sip:$avp(divuser)@194.186.177.74:5060>;reason=$dir;counter=1\r\n");
			}
			if (is_present_hf("P-Asserted-Identity")) {
				remove_hf("P-Asserted-Identity");
				append_hf("P-Asserted-Identity: <sip:$fU@194.186.177.74:5060>\r\n");
			}
			if (is_present_hf("Remote-Party-ID")) {
				remove_hf("Remote-Party-ID");
				append_hf("Remote-Party-ID: <sip:$fU@194.186.177.74:5060>\r\n");
			}
			if (is_present_hf("User-Agent")) {
				remove_hf("User-Agent");
				append_hf("User-Agent: TeleTouchProxy_v1\r\n");
			}
			if (is_present_hf("Server")) {
				remove_hf("Server");
				append_hf("Server: TeleTouchProxy_v1\r\n");
			}
			force_send_socket(udp:192.168.0.6:5060);
			uac_replace_from("", "sip:$fU@194.186.177.74");
			route(relay);
			exit;
		} else {
			xlog('L_INFO','\n\n\n\n Not known call from FS side \n\n\n\n');
			t_reply('404','Route not found');
		}
	}

	if (is_method("REGISTER") && !ds_is_in_list('$si', '$sp')) {
		if ($Rp==5060) {
			mid_registrar_save("location");
			switch ($retcode) {
			case 1:
				if ( !ds_select_dst('1','4')) {
					if ( !ds_select_dst('5','4')) {
						send_reply('503',"Main registrar is unaviable");
						exit;
					}
				}
				$du = 'sip:' + $dd + ':' + $dp;
				$ru = 'sip:' + $dd + ':' + $dp;
				force_send_socket(udp:192.168.0.6:5060);
				if (is_present_hf("User-Agent")) {
					remove_hf("User-Agent");
					append_hf("User-Agent: TeleTouchProxy_v1\r\n");
				}
				if (is_present_hf("Server")) {
					remove_hf("Server");
					append_hf("Server: TeleTouchProxy_v1\r\n");
				}
				$avp(expires) = $(hdr(Contact){nameaddr.param,expires});
				if ($avp(expires) == NULL) {
					$avp(expires) = $hdr(Expires);
					if ($avp(expires) == NULL) {
						remove_hf("Contact");
						append_hf("Contact: <sip:$fU@192.168.0.6:5060>\r\n");
						mid_registrar_save("location", "r");
						if (!t_relay()) {
							send_reply('500', "Server Internal Error 1");
						}
					} else {
						if ($avp(expires) == "0") {
							remove_hf("Expires");
							append_hf("Expires: $avp(expires)\r\n");
							remove_hf("Contact");
							append_hf("Contact: <sip:$fU@192.168.0.6:5060>\r\n");
							mid_registrar_save("location", "r");
							if (!t_relay()) {
								send_reply('500', "Server Internal Error 1");
							}
						} else {
							mid_registrar_save("location");
							remove_hf("Expires");
							append_hf("Expires: $avp(expires)\r\n");
							remove_hf("Contact");
							append_hf("Contact: <sip:$fU@192.168.0.6:5060>\r\n");
							if (!t_relay()) {
								send_reply('500', "Server Internal Error 1");
							}
						}
					}
				} else {
					if ($avp(expires) == NULL) {
						remove_hf("Contact");
						append_hf("Contact: <sip:$fU@192.168.0.6:5060>\r\n");
						mid_registrar_save("location", "r");
						create_dialog();
						set_dlg_sharing_tag("vip1");
						if (!t_relay()) {
								send_reply('500', "Server Internal Error 1");
						}
					} else {
						if ($avp(expires) == "0") {
							remove_hf("Expires");
							append_hf("Expires: $avp(expires)\r\n");
							remove_hf("Contact");
							append_hf("Contact: <sip:$fU@192.168.0.6:5060>\r\n");
							mid_registrar_save("location", "r");
							if (!t_relay()) {
								send_reply('500', "Server Internal Error 1");
							}
						} else {
							mid_registrar_save("location");
							remove_hf("Expires");
							append_hf("Expires: $avp(expires)\r\n");
							remove_hf("Contact");
							append_hf("Contact: <sip:$fU@192.168.0.6:5060>\r\n");
							if (!t_relay()) {
								send_reply('500', "Server Internal Error 1");
							}
						}
					}
				}
			break;
			case 2:
				xlog("L_INFO", "REGISTER has been absorbed!\n");
				break;
			default:
				xlog("L_ERR", "mid-registrar error!\n");
				send_reply('500', "Server Internal Error 2");
			}
			exit;
		} else {
			drop();
	    	exit;
		}
	}

	if (!is_method('REGISTER') && !ds_is_in_list('$si', '$sp')) {
		if ( $Rp == '5060' ) {
			if ( !ds_select_dst('1','4')) {
				if ( !ds_select_dst('5','4')) {
					do_accounting("db","missed");
					send_reply('503',"Main registrar is unaviable");
					exit;
				};
			};
			$du = 'sip:' + $dd + ':' + $dp;
			$ru = 'sip:' + $tU +'@' + $td + ':' + $dp;
			if (is_present_hf("User-Agent")) {
				remove_hf("User-Agent");
				append_hf("User-Agent: TeleTouchProxy_v1\r\n");
			}
			if (is_present_hf("Server")) {
				remove_hf("Server");
				append_hf("Server: TeleTouchProxy_v1\r\n");
			}
			if (is_present_hf("Diversion")) {
				$var(hdr) = $hdr(Diversion);
				$var(raw_divuser) = $var(hdr);
		    	$var(reg_start) = "/(.*?)<sip://g";
		        $var(reg_end) = "/@(.*)//g";
				$var(raw_divuser) = $(var(raw_divuser){re.subst,$var(reg_start)});
        		$var(raw_divuser) = $(var(raw_divuser){re.subst,$var(reg_end)});
				$avp(divuser) = $var(raw_divuser) ;
				remove_hf("Diversion");
				append_hf("Diversion: <sip:$avp(divuser)@194.186.177.74:5060>;reason=$dir;counter=1\r\n");
			}
			if (is_present_hf("P-Asserted-Identity")) {
				remove_hf("P-Asserted-Identity");
				append_hf("P-Asserted-Identity: <sip:$fU@194.186.177.74:5060>\r\n");
			}
			if (is_present_hf("Remote-Party-ID")) {
				remove_hf("Remote-Party-ID");
				append_hf("Remote-Party-ID: <sip:$fU@194.186.177.74:5060>\r\n");
			}
			force_send_socket(udp:192.168.0.6:5060);
			route(relay);
		} else if ( $Rp == '5080' && check_source_address( '1', '$avp(trunk_attrs)')) {
			if ( !ds_select_dst('2','4')) {
				if ( !ds_select_dst('6','4')) {
					do_accounting("db","missed");
					send_reply('503',"Main registrar is unaviable");
					exit;
				};
			};
			avp_db_query("SELECT node FROM mod_distributor WHERE node=$tU", "$avp(didnum)", "1");
			if ($avp(didnum) != NULL ) {
				if (is_present_hf("User-Agent")) {
					remove_hf("User-Agent");
					append_hf("User-Agent: TeleTouchProxy_v1\r\n");
				}
				if (is_present_hf("Server")) {
					remove_hf("Server");
					append_hf("Server: TeleTouchProxy_v1\r\n");
				}
				$du = 'sip:' + $dd + ':' + $dp;
				$ru = 'sip:' + $fU +'@' + $dd + ':' + $dp;
				if (is_present_hf("User-Agent")) {
					remove_hf("User-Agent");
					append_hf("User-Agent: TeleTouchProxy_v1\r\n");
				}
				if (is_present_hf("Server")) {
					remove_hf("Server");
					append_hf("Server: TeleTouchProxy_v1\r\n");
				}
				force_send_socket(udp:192.168.0.6:5080);
				$du = 'sip:' + $dd + ':' + $dp;
				$ru = 'sip:' + $fU +'@' + $dd + ':' + $dp;
				if (is_present_hf("Diversion")) {
					$var(hdr) = $hdr(Diversion);
					$var(raw_divuser) = $var(hdr);
					$var(reg_start) = "/(.*?)<sip://g";
					$var(reg_end) = "/@(.*)//g";
					$var(raw_divuser) = $(var(raw_divuser){re.subst,$var(reg_start)});
					$var(raw_divuser) = $(var(raw_divuser){re.subst,$var(reg_end)});
					$avp(divuser) = $var(raw_divuser) ;
					remove_hf("Diversion");
					append_hf("Diversion: <sip:$avp(divuser)@194.186.177.74:5080>;reason=$dir;counter=1\r\n");
				}
				if (is_present_hf("P-Asserted-Identity")) {
					remove_hf("P-Asserted-Identity");
					append_hf("P-Asserted-Identity: <sip:$fU@194.186.177.74:5080>\r\n");
				}
				if (is_present_hf("Remote-Party-ID")) {
					remove_hf("Remote-Party-ID");
					append_hf("Remote-Party-ID: <sip:$fU@194.186.177.74:5080>\r\n");
				}
				route(relay);
			} else {
				drop();
				exit;
			}
		}
	}
}

route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		xlog ("L_INFO"," Address Family is $af\n");
		topology_hiding();
		if(ds_is_in_list('$si', '$sp')) { 
			set_advertised_address("194.186.177.74");
			setflag(inbound);
			#rtpengine_use_set('1');
			#rtpengine_offer("replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer ICE=remove in-iface=internal out-iface=external");
		} else if(!ds_is_in_list('$si', '$sp')) {
			setflag(outbound);
			#rtpengine_use_set('1');
			#rtpengine_offer("replace-origin replace-session-connection rtcp-mux-accept ICE=remove in-iface=external out-iface=internal");
		}

		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (isflagset(NAT)) {
		add_rr_param(";nat=yes");
	}

	if (!t_relay()) {
		send_reply('500',"Internal Error");
	}
	exit;
}

route[relaycarrier] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {

		topology_hiding();
		if(ds_is_in_list('$si', '$sp')) { 
			set_advertised_address("194.186.177.74");
			setflag(inbound);
			#rtpengine_use_set('1');
			#rtpengine_offer("replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer ICE=remove in-iface=internal out-iface=external");
		} else if(!ds_is_in_list('$si', '$sp')) {
			setflag(outbound);
			#rtpengine_use_set('1');
			#rtpengine_offer("replace-origin replace-session-connection rtcp-mux-accept ICE=remove in-iface=external out-iface=internal");
		}

		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("uac_fail_auth");
	}

	if (isflagset(NAT)) {
		add_rr_param(";nat=yes");
	}

	if (!t_relay()) {
		send_reply("500","Internal Error");
	}
	exit;
}


# Presence route
route[handle_presence]
{
	if (!t_newtran()) {
		sl_reply_error();
		exit;
	}

	exit;
}


branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}

onreply_route[handle_nat] {
    if (has_body("application/sdp") && nat_uac_test('8')) {
		xlog("L_INFO", "$ci|log| 8 SDP contains a RFC1918 address");
    	# alters the SDP information in order to facilitate NAT traversal.
    	# 2. rewrite media IP address (c=) with source IP
        # 8. rewrite IP from origin description (o=) with source IP
        fix_nated_sdp('10');
		setflag(NAT);
		xlog("L_INFO", "$ci|log| Reply: SDP contains RFC1918 address, fixed");
	}
	
	if (nat_uac_test('7')) {
	    xlog("L_INFO", "$ci|log| 1 Contact header field is searched for occurrence of RFC1918 / RFC6598 addresses.");
		fix_nated_contact();
	}

	if (has_body("application/sdp") && isflagset(outbound)) {
        xlog("L_INFO", "$ci|log| Enabling RTP Engine for outbound call");
		#rtpengine_use_set('1');
        #rtpengine_answer("replace-origin replace-session-connection rtcp-mux-accept ICE=remove in-iface=internal out-iface=external");
    }
	if (has_body("application/sdp") && isflagset(inbound)) {
        xlog("L_INFO", "$ci|log| Enabling RTP Engine for inbound call");
		#rtpengine_use_set('1');
        #rtpengine_answer("replace-origin replace-session-connection rtcp-mux-accept ICE=remove in-iface=external out-iface=internal");
    }
	#if (t_check_status("(487)|(408)|(403)|(404)|(405)|(406)|(484)|(483)|(482)|(480)|(502)|(503)|(513)")) {
		#rtpengine_delete();
	#}
	xlog("incoming reply $rs\n");
	if (isflagset(outbound)) {
		set_advertised_address("194.186.177.74");
	}
	if (is_present_hf("User-Agent")) {
		remove_hf("User-Agent");
		append_hf("User-Agent: SmartTel Plus OU_FIN\r\n");
	}
	if (is_present_hf("Server")) {
		remove_hf("Server");
		append_hf("Server: SmartTel Plus OU_FIN\r\n");
	}
#	trace("tid", "d","sip|xlog|log");
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		#rtpengine_delete();
		exit;
	}
}

failure_route[uac_fail_auth] {
	if (t_was_cancelled()) {
		exit;
	}
	if ( t_check_status("40[17]") ) {
		$var(hdr) = $(<reply>hdr(Proxy-Authenticate));
        if ( $var(hdr) != NULL ) {
            $var(raw_auth) = $var(hdr);
            xlog("L_INFO", "Proxy-Auth is present");
        }
        #WWW is an Asterisk flavour
        $var(hdr) = $(<reply>hdr(WWW-Authenticate));
        if ( $var(hdr) != NULL ) {
            $var(raw_auth) = $(var(hdr));
            xlog("L_INFO", "WWW-Auth is present");
        }
    	$var(reg_start) = "/(.*?)realm=\"//g";
        $var(reg_end) = "/\"(.*)//g";
        xlog("L_INFO", "Raw data $var(raw_auth)");
        $var(raw_auth) = $(var(raw_auth){re.subst,$var(reg_start)});
        $var(raw_auth) = $(var(raw_auth){re.subst,$var(reg_end)});
        xlog("L_INFO", "Got realm data $var(raw_auth)");
		$avp(realm) = $var(raw_auth) ;
		xlog("L_INFO", " Carrier username $avp(user)");
		xlog("L_INFO", " Carrier password $avp(pass)");
		xlog("L_INFO", " Carrier realm $avp(realm)");
    	if (uac_auth()) {
			xlog("L_NOTICE","PSTN: UAC AUTH sended");
			t_relay();
		} else {
			xlog("L_NOTICE","PSTN: UAC AUTH Error");
			send_reply('500',"UAC_AUTH Error");
		}
#		b2b_init_request("top hiding");
		exit;
	}
}


local_route {
	if (is_method("BYE") && $DLG_dir=="UPSTREAM") {
		
		acc_db_request("200 Dialog Timeout", "acc");
		
	}
}

